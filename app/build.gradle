apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion = versions.buildTools

    defaultConfig {
        applicationId names.applicationId
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode rootProject.gitCommitCount
        versionName names.name
        archivesBaseName = "Violas-${versionName}"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled = true
    }

    signingConfigs {
        release {
            Properties properties = new Properties()
            File configFile = project.rootProject.file('sign.properties')
            if (!configFile.exists()) {
                configFile = project.rootProject.file('testSign.properties')
            }
            properties.load(configFile.newDataInputStream())

            storeFile file(properties.getProperty('keyFile'))

            keyAlias properties.getProperty('keyAlias')
            keyPassword properties.getProperty('keyPassword');
            storePassword properties.getProperty('storePassword');
        }
        debug {
            storeFile file("keystore/debug.keystore")
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            ext.alwaysUpdateBuildId = false
            signingConfig signingConfigs.debug
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$versions.kotlin"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.android.material:material:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    def room_version = "2.2.0"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"

    // see https://github.com/googlesamples/easypermissions
    implementation 'pub.devrel:easypermissions:3.0.0'

    implementation project(":core")
    implementation project(":lib-scan")
    implementation project(":libra-core")

    // EventBus see https://github.com/greenrobot/EventBus
    implementation 'org.greenrobot:eventbus:3.1.1'

    //布局到状态栏 see https://github.com/niorgai/StatusBarCompat
    implementation('com.github.niorgai:StatusBarCompat:2.3.3', {
        exclude group: 'androidx.appcompat:appcompat'
        exclude group: 'com.google.android.material:material'
    })

    //头条适配方案 see https://github.com/JessYanCoding/AndroidAutoSize
    implementation "me.jessyan:autosize:1.1.2"

}
