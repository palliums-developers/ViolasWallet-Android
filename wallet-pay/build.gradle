apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply from: '../and_res_guard.gradle'

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion = versions.buildTools

    defaultConfig {
        applicationId names.payApplicationId
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode rootProject.gitCommitCount
        versionName names.payVersionName
        archivesBaseName = "ViolasPay-${versionName}"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    dataBinding {
        enabled = true
    }

    signingConfigs {
        release {
            Properties properties = new Properties()
            File configFile = project.rootProject.file('payDevelopSign.properties')
            if (!configFile.exists()) {
                configFile = project.rootProject.file('testSign.properties')
            }
            properties.load(configFile.newDataInputStream())

            storeFile file(properties.getProperty('keyFile'))

            keyAlias properties.getProperty('keyAlias')
            keyPassword properties.getProperty('keyPassword')
            storePassword properties.getProperty('storePassword')
        }
        debug {
            storeFile file("../keystore/debug.keystore")
        }
    }

    bundle {
        // 是否分割多语言包
        language {
            enableSplit = false
        }
        // 是否分割资源
        density {
            enableSplit = true
        }
        // 是否分割二进制 so 包资源
        abi {
            enableSplit = true
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            zipAlignEnabled true
            pseudoLocalesEnabled true
            proguardFiles '../proguard-android-optimize-wallet.txt', 'proguard-rules.pro'
            multiDexKeepProguard file('../multidexKeep.pro')
            signingConfig signingConfigs.release
            buildConfigField "boolean", "SHUFFLE_MNEMONIC", "true"

            ndk {
                abiFilters 'arm64-v8a', 'armeabi-v7a', 'armeabi'
            }
        }
        debug {
//            minifyEnabled true
//            zipAlignEnabled true
//            pseudoLocalesEnabled true
//            proguardFiles '../proguard-android-optimize-wallet.txt', 'proguard-rules.pro'
            ext.alwaysUpdateBuildId = false
            multiDexKeepProguard file('../multidexKeep.pro')
            signingConfig signingConfigs.debug
            buildConfigField "boolean", "SHUFFLE_MNEMONIC", "false"

            ndk {
                abiFilters 'arm64-v8a', 'armeabi-v7a', 'armeabi', "x86", "x86-64"
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs = ["-Xallow-result-return-type"]
    }

    flavorDimensions "typeNetwork", "local"

    productFlavors {
        demo {
            dimension "local"
            applicationIdSuffix ".demo"
            resValue "string", "app_name", "ViolasPay Demo"
        }

        googlePlay {
            dimension "local"
            applicationIdSuffix ".beta"
            resValue "string", "app_name", "ViolasPay"
        }

        tNet {
            dimension "typeNetwork"
            buildConfigField "String", "TESTNET", '"testnet"'
        }

        mainNet {
            dimension "typeNetwork"
            buildConfigField "String", "TESTNET", '"main"'
        }
    }

    variantFilter { variant ->
        def names = variant.flavors*.name
        println(names)
        if (names.contains("mainNet") && names.contains("demo")) {
            setIgnore(true)
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(':lib-common')
    implementation project(':lib-core')
    implementation project(':lib-zbar-scan')
    implementation project(':lib-switch-button')
    implementation project(':lib-libra-core')
    implementation project(':module-violas')
//    implementation project(':lib-violas-core')
    implementation project(':lib-btc-core')
    implementation project(':lib-wallet-connect')
    implementation project(':lib-biometric')
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    testImplementation libraries.test_junit
    androidTestImplementation libraries.androidTest_junit
    androidTestImplementation libraries.androidTest_espresso

    kapt libraries.androidx_room_compiler
    implementation libraries.androidx_room_ktx
    implementation libraries.androidx_room_runtime

    implementation libraries.easypermissions
    implementation libraries.autosize
    implementation libraries.BottomNavigationViewEx

    implementation libraries.eventbus
    implementation(libraries.socketio_client) {
        // excluding org.json which is provided by Android
        exclude group: 'org.json', module: 'json'
    }

    implementation libraries.glide
    implementation libraries.glide_okhttp3_integration
    kapt libraries.glide_compiler
}
