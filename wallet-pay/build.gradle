apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply from: '../and_res_guard.gradle'

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion = versions.buildTools

    defaultConfig {
        applicationId names.payApplicationId
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode rootProject.gitCommitCount
        versionName names.payName
        archivesBaseName = "ViolasPay-${versionName}"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        ndk {
            abiFilters 'arm64-v8a', 'armeabi-v7a', 'armeabi'
        }
    }

    dataBinding {
        enabled = true
    }

    signingConfigs {
        release {
            Properties properties = new Properties()
            File configFile = project.rootProject.file('paySign.properties')
            if (!configFile.exists()) {
                configFile = project.rootProject.file('testSign.properties')
            }
            properties.load(configFile.newDataInputStream())

            storeFile file(properties.getProperty('keyFile'))

            keyAlias properties.getProperty('keyAlias')
            keyPassword properties.getProperty('keyPassword');
            storePassword properties.getProperty('storePassword');
        }
        debug {
            storeFile file("../keystore/debug.keystore")
        }
    }

    bundle {
        // 是否分割多语言包
        language {
            enableSplit = false
        }
        // 是否分割资源
        density {
            enableSplit = true
        }
        // 是否分割二进制 so 包资源
        abi {
            enableSplit = true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            zipAlignEnabled true
            pseudoLocalesEnabled true
            proguardFiles '../proguard-android-optimize-wallet.txt', 'proguard-rules.pro'
            multiDexKeepProguard file('../multidexKeep.pro')
            signingConfig signingConfigs.release
            buildConfigField "boolean", "SHUFFLE_MNEMONIC", "true"
        }
        debug {
            minifyEnabled false
            ext.alwaysUpdateBuildId = false
            multiDexKeepProguard file('../multidexKeep.pro')
            signingConfig signingConfigs.debug
            buildConfigField "boolean", "SHUFFLE_MNEMONIC", "true"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs = ["-Xallow-result-return-type"]
    }

    flavorDimensions "typeNetwork","local"

    productFlavors {
        demo{
            dimension "local"
            applicationIdSuffix ".beta"
            versionNameSuffix "-demo"
            resValue "string", "app_name", "ViolasPay Demo"
        }

        googlePlay{
            dimension "local"
            resValue "string", "app_name", "ViolasPay"
        }

        tNet {
            dimension "typeNetwork"
            buildConfigField "String", "TESTNET", '"testnet"'
        }

        mainNet {
            dimension "typeNetwork"
            buildConfigField "String", "TESTNET", '"main"'
        }
    }

    variantFilter { variant ->
        def names = variant.flavors*.name
        println(names)
        if (names.contains("mainNet") && names.contains("demo")) {
            setIgnore(true)
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(':lib-common')
    implementation project(':lib-core')
    implementation project(':lib-zbar-scan')
    implementation project(':lib-switch-button')
    implementation project(':lib-libra-core')
    implementation project(':lib-violas-core')
    implementation project(':lib-btc-core')
    implementation project(':module-violas')

    testImplementation "junit:junit:$versions.test_junit"
    androidTestImplementation "androidx.test.ext:junit:$versions.androidTest_junit"
    androidTestImplementation "androidx.test.espresso:espresso-core:$versions.androidTest_espresso"

    kapt "androidx.room:room-compiler:$versions.androidx_room"
    implementation "androidx.room:room-runtime:$versions.androidx_room"
    implementation "androidx.room:room-ktx:$versions.androidx_room"

    // see https://github.com/googlesamples/easypermissions
    implementation 'pub.devrel:easypermissions:3.0.0'

    // EventBus see https://github.com/greenrobot/EventBus
    implementation 'org.greenrobot:eventbus:3.1.1'

    //头条适配方案 see https://github.com/JessYanCoding/AndroidAutoSize
    implementation "me.jessyan:autosize:1.1.2"

    // see https://github.com/ittianyu/BottomNavigationViewEx
    implementation 'com.github.ittianyu:BottomNavigationViewEx:2.0.4'

    implementation ('io.socket:socket.io-client:1.0.0') {
        // excluding org.json which is provided by Android
        exclude group: 'org.json', module: 'json'
    }
}
